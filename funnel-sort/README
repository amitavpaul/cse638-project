Using the funnelsort implementation

Start by including the merger and sort headers:

                #include <funnel.h>
                #include <sort.h>
Pick a merger to be used by the sort function, say a funnel (denoted a merge_tree) using four-way basic mergers merging arrays of ints:

                typedef typename iosort::merge_tree<int*,4> merger;
Use iosort::merge_sort to sort the int array:

                #include <vector>

                void sort_12k()
                {
                        std::vector<int> array(12000);
                        // TODO: populate array with input.
                        std::vector<int> output(12000);

                        iosort::merge_sort<merger,iosort:default_splitter<4> >
                                (array.begin(), array.end(), output.begin());

                        // output now contains copies of the elements in array in sorted order
                }
or if you prefer

                // C-style:
                #include <stdlib.h>

                void sort_12k()
                {
                        int* array = (int*)malloc(12000*sizeof(int));
                        // TODO: populate array with input.
                        int* output = (int*)malloc(12000*sizeof(int));

                        iosort::merge_sort<merger,iosort:default_splitter<4> >
                                (array, array+12000, output);

                        // output now poitns to copies of the elements in array in sorted order

                        free(output);
                        free(array);
                }
The iosort:default_splitter class template defines parameters used to decide the order of the merger to use for a given problem size and similar issues. Its template argument should match the argument to the merge_tree class.


